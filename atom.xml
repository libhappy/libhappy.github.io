<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[LibHappy]]></title>
  <subtitle><![CDATA[Happy Life, Happy Coding.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://libhappy.com/"/>
  <updated>2016-01-03T14:42:20.307Z</updated>
  <id>http://libhappy.com/</id>
  
  <author>
    <name><![CDATA[Arthur]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[用Gogs搭建自己的Git服务器]]></title>
    <link href="http://libhappy.com/2016/01/build-gogs-service/"/>
    <id>http://libhappy.com/2016/01/build-gogs-service/</id>
    <published>2016-01-03T09:01:51.000Z</published>
    <updated>2016-01-03T14:42:20.307Z</updated>
    <content type="html"><![CDATA[<p>Git是非常流行的版本管理系统，很多的网站也提供了免费的Git服务，如全球知名的最大源代码托管服务<a href="http://github.com" target="_blank" rel="external">Github</a>。但是大部分的Git源代码托管服务都只对开放的代码托管免费，对私有的代码托管需要收取一定费用。同时，个人的一些代码有时由于各种原因可能并不适合开放，比如：练习用代码，对Git服务提供商的隐私性及安全性有所担忧，包含一些商业机密等等。此时可以搭建自己的Git服务器来托管代码。<br><a id="more"></a><br>应用最广泛的Git托管程序要数<a href="http://gitlab.com" target="_blank" rel="external">Gitlab</a>，它采用Ruby on Rails，可以实现一个自托管的Git项目仓库，并可以通过网页对公开的或者私人项目进行访问。其功能与Github相似，但搭建过程稍复杂且对系统的配置要求较高。因此我选用了另一个方案Gogs。<br><!--toc--></p>
<h1 id="Gogs简介">Gogs简介</h1><p><a href="http://gogs.io" target="_blank" rel="external">Gogs</a>是一款极易搭建的自助Git服务，在官网介绍中它有以下优点：</p>
<ul>
<li>易安装：除了可以根据操作系统平台下载二进制运行，还可以通过Docker或Vagrant，以及包管理安装。</li>
<li>跨平台：任何Go语言支持的平台都可以运行Gogs，包括Windows、Mac、Linux 以及ARM。</li>
<li>轻量级：一个廉价的树莓派的配置足以满足Gogs的最低系统硬件要求。有些用户甚至还将Gogs运行在NAS设备上。</li>
<li>开源化：所有的代码都开源在<a href="https://github.com/gogits/gogs/" target="_blank" rel="external">GitHub</a>。</li>
</ul>
<p>具体的界面可以到官方提供的<a href="https://try.gogs.io/" target="_blank" rel="external">在线体验</a>界面查看。<br>需要注意的是，Gogs现在还在开发中，在某些具体功能上还不及Gitlab，但相信随着后续的开发功能一定会越来越完备的。</p>
<h1 id="Gogs依赖环境">Gogs依赖环境</h1><p>安装Gogs之前需要配置相应的依赖环境，官网介绍的依赖环境如下：</p>
<ul>
<li>数据库（选择以下一项）：<ul>
<li>MySQL：版本 &gt;= 5.5.3</li>
<li>PostgreSQL</li>
<li>或者 什么都不安装 直接使用 SQLite3 或 TiDB</li>
</ul>
</li>
<li>git（bash）：<ul>
<li>服务端和客户端均需版本 &gt;= 1.7.1</li>
<li>Windows 系统建议使用最新版</li>
</ul>
</li>
<li>SSH 服务器：<ul>
<li>如果您只使用 HTTP/HTTPS 或者内置 SSH 服务器的话请忽略此项</li>
<li>推荐 Windows 系统使用 Cygwin OpenSSH 或 Copssh</li>
</ul>
</li>
<li>Nginx反向代理（可选）</li>
</ul>
<p>以下以Ubuntu服务器为例安装Gogs。</p>
<h1 id="安装Git">安装Git</h1><p>安装Git:<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install git</span><br></pre></td></tr></table></figure></p>
<p>检查Git是否安装成功:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="comment">--version</span></span><br></pre></td></tr></table></figure></p>
<h1 id="安装及配置MySQL数据库">安装及配置MySQL数据库</h1><h2 id="安装MySQL">安装MySQL</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get <span class="operator"><span class="keyword">install</span> mysql-<span class="keyword">server</span></span></span><br></pre></td></tr></table></figure>
<p>安装时需要配置MySQL的root用户及密码。<br>检查MySQL是否安装成功<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="comment">--version</span></span><br></pre></td></tr></table></figure></p>
<h2 id="配置MySQL">配置MySQL</h2><p>创建gogs数据库，配置数据库编码为utf8，数据库引擎为InnoDB。<br><figure class="highlight lasso"><figcaption><span>mysql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="attribute">-u</span> root <span class="attribute">-p</span></span><br><span class="line">mysql&gt; <span class="built_in">SET</span> <span class="built_in">GLOBAL</span> storage_engine = <span class="string">'InnoDB'</span>;</span><br><span class="line">mysql&gt; CREATE DATABASE gogs CHARACTER <span class="built_in">SET</span> utf8 COLLATE utf8_bin;</span><br><span class="line">mysql&gt; GRANT <span class="literal">ALL</span> PRIVILEGES <span class="keyword">ON</span> gogs<span class="built_in">.</span>* <span class="keyword">TO</span> ‘root’@‘localhost’ IDENTIFIED <span class="keyword">BY</span> ‘password’;</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">mysql&gt; QUIT;</span><br></pre></td></tr></table></figure></p>
<h1 id="新建git用户">新建git用户</h1><p>为运行Gogs创建一个新的用户git：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">sudo</span> <span class="keyword">adduser </span>git</span><br></pre></td></tr></table></figure></p>
<p>然后按照提示设置相关用户信息及密码。在后文中运行Gogs时需要以该用户身份运行。</p>
<h1 id="安装Go语言运行环境">安装Go语言运行环境</h1><p>Gogs由Go语言编写，运行时需要安装Golang运行环境。如果系统中其他程序并不需要运行Go语言程序，可以只为上文创建的git用户配置运行环境，也可以选择配置全系统所有用户的Go语言运行环境。</p>
<h2 id="配置环境变量">配置环境变量</h2><p>切换到用户git，并只为该用户配置Go运行环境。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su git&#10;cd ~&#10;mkdir go</span><br></pre></td></tr></table></figure></p>
<p>写入环境变量：<br><figure class="highlight cpp"><figcaption><span>.bashrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> GOROOT=$HOME/go</span><br><span class="line"><span class="keyword">export</span> GOARCH=<span class="number">386</span>   <span class="preprocessor">#系统位数，<span class="number">386</span>表示<span class="number">32</span>位系统，amd64表示<span class="number">64</span>位系统。</span></span><br><span class="line"><span class="keyword">export</span> GOOS=linux   <span class="preprocessor">#系统类型</span></span><br><span class="line"><span class="keyword">export</span> PATH=$PATH:$GOROOT/bin</span><br></pre></td></tr></table></figure><br>使环境变量生效：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p>
<h2 id="安装Go">安装Go</h2><p><a href="https://golang.org/dl/" target="_blank" rel="external">Go语言官网</a>可以获取最新的二进制安装包：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="comment">//storage.googleapis.com/golang/go1.5.2.linux-386.tar.gz</span></span><br><span class="line">tar xzvf go1.<span class="number">5.2</span><span class="class">.linux-386</span><span class="class">.tar</span><span class="class">.gz</span></span><br><span class="line">mv go <span class="variable">$GOROOT</span></span><br></pre></td></tr></table></figure></p>
<p>Go语言运行环境就安装完成了，测试Golang是否安装成功：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_ins">env</span></span><br></pre></td></tr></table></figure></p>
<h1 id="安装Gogs">安装Gogs</h1><p>访问<a href="https://gogs.io/docs/installation/install_from_binary" target="_blank" rel="external">Gogs官网</a>可以获取最新的Gogs二进制安装包。<br><figure class="highlight stylus"><figcaption><span>git@computer:~</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir goapp</span><br><span class="line">cd goapp</span><br><span class="line">wget http:<span class="comment">//7d9nal.com2.z0.glb.qiniucdn.com/gogs_v0.8.10_linux_386.tar.gz</span></span><br><span class="line">tar xzvf gogs_v0.<span class="number">8.10</span>_linux_386<span class="class">.tar</span><span class="class">.gz</span></span><br></pre></td></tr></table></figure><br>Gogs程序就安装到了<code>~/goapp</code>目录下，可以直接运行gogs。<br><figure class="highlight bash"><figcaption><span>git@computer:~/goapp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> gogs</span><br><span class="line">./gogs web</span><br></pre></td></tr></table></figure><br>Gogs默认监听3000端口，此时用浏览器打开服务器IP的3000端口(服务器IP:3000)，在网页中进行初始配置。<br>需要注意的是，<strong>首次运行时建议设置Gogs的管理员账户</strong>，拖动到网页最下方填写管理员用户及密码即可。</p>
<h1 id="设置Nginx反向代理">设置Nginx反向代理</h1><p>Gogs默认监听3000端口，使用Nginx将80端口的访问代理至3000端口即可直接通过IP访问Gogs，绑定域名后还可以通过域名访问。</p>
<h2 id="安装Nginx">安装Nginx</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install nginx</span><br></pre></td></tr></table></figure>
<h2 id="配置Nginx代理">配置Nginx代理</h2><p>为Gogs创建一个Nginx配置文件：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-available/g</span>ogs</span><br></pre></td></tr></table></figure></p>
<p>写入以下配置：<br><figure class="highlight nginx"><figcaption><span>/etc/nginx/sites-available/gogs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">server</span> &#123;</span><br><span class="line">    <span class="title">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="title">server_name</span> your_server_ip; <span class="comment"># your_server_ip为服务器IP或绑定的域名</span></span><br><span class="line"></span><br><span class="line">    <span class="title">location</span> / &#123;</span><br><span class="line">        <span class="title">proxy_pass</span> <span class="url">http://127.0.0.1:3000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>保存后将该配置文件链接到<code>sites-enabled</code>中。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-available/g</span>ogs <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-enabled/g</span>ogs</span><br></pre></td></tr></table></figure></p>
<p>重启nginx：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sudo</span> service nginx restart</span><br></pre></td></tr></table></figure></p>
<p>然后就可以直接通过域名或IP访问Gogs了。</p>
<h1 id="Gogs运行的其他注意事项">Gogs运行的其他注意事项</h1><p>至此Gogs服务就安装完成了。Gogs运行时还有以下注意事项：</p>
<ol>
<li><p>Gogs的自定义配置文件位于<code>gogs/custom/conf/app.ini</code>，具体的参数配置可以参考官方的<a href="https://gogs.io/docs/advanced/configuration_cheat_sheet.html" target="_blank" rel="external">配置文件手册</a>。比如，如果修改了ssh的默认端口，就需要在自定义配置文件中指定修改后的ssh端口：</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">SSH_PORT</span>: <span class="string">8888</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>gogs/scripts</code>文件目录中针对不同服务管理软件的已经配置好的Gogs启动脚本文件，比如<code>supervisor</code>脚本的内容如下：</p>
<figure class="highlight ini"><figcaption><span>gogs/scripts/supervisor/gogs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[program:gogs]</span></span><br><span class="line"><span class="setting">directory=<span class="value">/home/git/go/src/github.com/gogits/gogs/</span></span></span><br><span class="line"><span class="setting">command=<span class="value">/home/git/go/src/github.com/gogits/gogs/gogs web</span></span></span><br><span class="line"><span class="setting">autostart=<span class="value"><span class="keyword">true</span></span></span></span><br><span class="line"><span class="setting">autorestart=<span class="value"><span class="keyword">true</span></span></span></span><br><span class="line"><span class="setting">startsecs=<span class="value"><span class="number">10</span></span></span></span><br><span class="line"><span class="setting">stdout_logfile=<span class="value">/var/log/gogs/stdout.log</span></span></span><br><span class="line"><span class="setting">stdout_logfile_maxbytes=<span class="value"><span class="number">1</span>MB</span></span></span><br><span class="line"><span class="setting">stdout_logfile_backups=<span class="value"><span class="number">10</span></span></span></span><br><span class="line"><span class="setting">stdout_capture_maxbytes=<span class="value"><span class="number">1</span>MB</span></span></span><br><span class="line"><span class="setting">stderr_logfile=<span class="value">/var/log/gogs/stderr.log</span></span></span><br><span class="line"><span class="setting">stderr_logfile_maxbytes=<span class="value"><span class="number">1</span>MB</span></span></span><br><span class="line"><span class="setting">stderr_logfile_backups=<span class="value"><span class="number">10</span></span></span></span><br><span class="line"><span class="setting">stderr_capture_maxbytes=<span class="value"><span class="number">1</span>MB</span></span></span><br><span class="line"><span class="setting">user = <span class="value">git</span></span></span><br><span class="line"><span class="setting">environment = <span class="value">HOME=<span class="string">"/home/git"</span>, USER=<span class="string">"git"</span></span></span></span><br></pre></td></tr></table></figure>
<p>修改一些文件路径及参数后就能够直接使用该文件在supervisor中设置Gogs的自动启动。</p>
</li>
<li>Gogs的托管的仓库文件默认位于<code>~/gogs-repositories/</code>文件夹中。</li>
</ol>
<h1 id="利用DropBox备份服务器文件">利用DropBox备份服务器文件</h1><p>通过自建的Git服务器来托管代码后，定时备份数据文件就显得格外重要了。一旦服务器出现故障而无法恢复，所有已上传的代码库也将丢失。<a href="https://db.tt/829rVOUg" target="_blank" rel="external">DropBox</a>是国外非常受信赖的云同步服务，虽然DropBox提供的免费空间较小，但用来备份个人代码文件还是足够的。而且DropBox提供了完善的API接口，可以通过命令行直接上传下载文件，当服务器位于海外时同步速度也十分令人满意。下面介绍如何将服务器中的数据备份至DropBox中。</p>
<h2 id="创建DropBox应用">创建DropBox应用</h2><p>首先需要创建一个DropBox应用来利用DropBox的API，直接点击该网址创建：<a href="https://www.dropbox.com/developers/apps/create" target="_blank" rel="external">https://www.dropbox.com/developers/apps/create</a>。<br>创建应用时的一些选项如下：</p>
<ul>
<li>Choose an API（应用类型）：DropBox API</li>
<li>Choose the type of access you need（数据访问类型）：App folder</li>
<li>Name your app（应用名称，取一个喜欢的即可）：GogsBackup</li>
</ul>
<p>应用创建后就可以获得<code>App key</code>和<code>App sercet</code>，保存这两行字符。</p>
<h2 id="获取并设置DropBox上传下载脚本">获取并设置DropBox上传下载脚本</h2><p><a href="https://github.com/andreafabrizi/Dropbox-Uploader/" target="_blank" rel="external">Dropbox-Uploader</a>是一个第三方的DropBox上传下载脚本。首先获取该脚本并为其设置可执行权限：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/tennfy/Dropbox-Uploader/master/dropbox_uploader.<span class="keyword">sh</span></span><br><span class="line">chmod <span class="keyword">a</span>+<span class="keyword">x</span> dropbox_uploader.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p>
<p>直接运行该脚本，第一次运行时会连接DropBox验证权限。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dropbox_uploader.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p>
<p>按照提示输入上文中保存的<code>App key</code>和<code>App sercet</code>，Permission type选择<code>a</code>。然后在浏览器中打开给出的连接地址，给予权限。以后运行时就不用再次验证了。<br><strong>注意</strong>：这个授权的过程只是针对当前登陆ssh的用户，并非全局，如果切换用户运行脚本，会提示再次进行授权，因此应提前切换到需要运行该脚本的用户进行授权。其实当前用户的授权信息保存在<code>~/.dropbox_uploader</code>文件中，因此切换用户后会提示首次运行需要进行授权。</p>
<h2 id="备份脚本">备份脚本</h2><p>参考<a href="http://www.tennfy.com/3343.html" target="_blank" rel="external">定时备份VPS数据至Dropbox教程</a>给出的备份脚本，修改相应参数即可。<br><figure class="highlight perl"><figcaption><span>backup.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 指定dropbox_uploader.sh脚本的保存目录</span></span><br><span class="line">SCRIPT_DIR=<span class="string">"/root/backup"</span></span><br><span class="line"><span class="comment"># 上传到DropBox的文件夹</span></span><br><span class="line">DROPBOX_DIR=<span class="string">"/backup/<span class="variable">$(</span>date +"</span><span class="variable">%Y</span>.<span class="variable">%m</span>.<span class="variable">%d</span><span class="string">")"</span></span><br><span class="line"><span class="comment"># 需要保存的服务器文件夹，可以用空格隔开多个文件夹</span></span><br><span class="line">BACKUP_SRC=<span class="string">"/home/git/gogs-repositories"</span></span><br><span class="line"><span class="comment"># 服务器上临时的备份保存文件夹</span></span><br><span class="line">LOCAL_BAK_DIR=<span class="string">"/root/backup"</span></span><br><span class="line"><span class="comment"># MySQL相应配置</span></span><br><span class="line">MYSQL_SERVER=<span class="string">"localhost"</span></span><br><span class="line">MYSQL_USER=<span class="string">"root"</span></span><br><span class="line">MYSQL_PASS=<span class="string">"1325xlg"</span></span><br><span class="line"><span class="comment"># 数据备份压缩后的文件名称</span></span><br><span class="line">DBBakName=Data<span class="number">_</span><span class="variable">$(</span>date +<span class="string">"<span class="variable">%Y</span><span class="variable">%m</span><span class="variable">%d</span>"</span>).tar.gz</span><br><span class="line">WebBakName=Web<span class="number">_</span><span class="variable">$(</span>date +<span class="string">"<span class="variable">%Y</span><span class="variable">%m</span><span class="variable">%d</span>"</span>).tar.gz</span><br><span class="line"><span class="comment"># 已过期备份数据的名称（3天前的数据会被删除）</span></span><br><span class="line">Old_DROPBOX_DIR=<span class="string">"/backup/<span class="variable">$(</span>date -d -3day +"</span><span class="variable">%Y</span>.<span class="variable">%m</span>.<span class="variable">%d</span><span class="string">")"</span></span><br><span class="line">OldDBBakName=Data<span class="number">_</span><span class="variable">$(</span>date -d -<span class="number">3</span>day +<span class="string">"<span class="variable">%Y</span><span class="variable">%m</span><span class="variable">%d</span>"</span>).tar.gz</span><br><span class="line">OldWebBakName=Web<span class="number">_</span><span class="variable">$(</span>date -d -<span class="number">3</span>day +<span class="string">"<span class="variable">%Y</span><span class="variable">%m</span><span class="variable">%d</span>"</span>).tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出MySQL数据库备份（所有数据库），并压缩为指定文件名</span></span><br><span class="line">mysqldump -u <span class="variable">$MYSQL_USER</span> -h <span class="variable">$MYSQL_SERVER</span> -p<span class="variable">$MYSQL_PASS</span> --events --all-databases &gt; <span class="variable">$LOCAL_BAK_DIR</span>/Database.sql</span><br><span class="line">tar zcvf <span class="variable">$LOCAL_BAK_DIR</span>/<span class="variable">$DBBakName</span> <span class="variable">$LOCAL_BAK_DIR</span>/Database.sql</span><br><span class="line">rm -rf <span class="variable">$LOCAL_BAK_DIR</span>/Database.sql</span><br><span class="line"><span class="comment"># 压缩需要保存的文件夹为指定文件名</span></span><br><span class="line">tar zcvf <span class="variable">$LOCAL_BAK_DIR</span>/<span class="variable">$WebBakName</span> <span class="variable">$BACKUP_SRC</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传压缩后的备份文件到指定的DropBox目录</span></span><br><span class="line"><span class="variable">$SCRIPT_DIR</span>/dropbox_uploader.sh upload <span class="variable">$LOCAL_BAK_DIR</span>/<span class="variable">$DBBakName</span> <span class="variable">$DROPBOX_DIR</span>/<span class="variable">$DBBakName</span></span><br><span class="line"><span class="variable">$SCRIPT_DIR</span>/dropbox_uploader.sh upload <span class="variable">$LOCAL_BAK_DIR</span>/<span class="variable">$WebBakName</span> <span class="variable">$DROPBOX_DIR</span>/<span class="variable">$WebBakName</span></span><br><span class="line">echo -e <span class="string">"upload done!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传完成后删除服务器上及DropBox中已经过期的备份数据，节省空间</span></span><br><span class="line">rm -rf <span class="variable">$LOCAL_BAK_DIR</span>/<span class="variable">$OldDBBakName</span> <span class="variable">$LOCAL_BAK_DIR</span>/<span class="variable">$OldWebBakName</span></span><br><span class="line"><span class="variable">$SCRIPT_DIR</span>/dropbox_uploader.sh <span class="keyword">delete</span> <span class="variable">$Old_DROPBOX_DIR</span>/</span><br><span class="line">echo -e <span class="string">"delete old backup done"</span></span><br></pre></td></tr></table></figure><br>然后为该脚本增加运行权限：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">chmod</span> +<span class="keyword">x</span> ./backup.sh</span><br></pre></td></tr></table></figure></p>
<p>现在可以直接运行该脚本，测试其是否能够成功备份文件并上传至DropBox。</p>
<h2 id="设置备份脚本定时运行">设置备份脚本定时运行</h2><p>通过cron程序可以设定程序定时运行。需要注意的是cron运行是分用户的，某个用户设定的定时任务运行时会以该用户的权限运行。因此要注意上文中提到的dropbox_uploader运行用户的问题。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su root <span class="comment"># 切换到合适用户执行定时任务</span></span><br><span class="line">crontab <span class="operator">-e</span></span><br></pre></td></tr></table></figure></p>
<p>编辑定时任务，文件注释中有十分详细的说明：<br><figure class="highlight vala"><figcaption><span>crontab -e</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># Edit this file to introduce tasks to be run by cron.</span></span><br><span class="line"><span class="preprocessor">#</span></span><br><span class="line"><span class="preprocessor"># Each task to run has to be defined through a single line</span></span><br><span class="line"><span class="preprocessor"># indicating with different fields when the task will be run</span></span><br><span class="line"><span class="preprocessor"># and what command to run for the task</span></span><br><span class="line"><span class="preprocessor">#</span></span><br><span class="line"><span class="preprocessor"># To define the time you can provide concrete values for</span></span><br><span class="line"><span class="preprocessor"># minute (m), hour (h), day of month (dom), month (mon),</span></span><br><span class="line"><span class="preprocessor"># and day of week (dow) or use '*' in these fields (for 'any').#</span></span><br><span class="line"><span class="preprocessor"># Notice that tasks will be started based on the cron's system</span></span><br><span class="line"><span class="preprocessor"># daemon's notion of time and timezones.</span></span><br><span class="line"><span class="preprocessor">#</span></span><br><span class="line"><span class="preprocessor"># Output of the crontab jobs (including errors) is sent through</span></span><br><span class="line"><span class="preprocessor"># email to the user the crontab file belongs to (unless redirected).</span></span><br><span class="line"><span class="preprocessor">#</span></span><br><span class="line"><span class="preprocessor"># For example, you can run a backup of all your user accounts</span></span><br><span class="line"><span class="preprocessor"># at 5 a.m every week with:</span></span><br><span class="line"><span class="preprocessor"># 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/</span></span><br><span class="line"><span class="preprocessor">#</span></span><br><span class="line"><span class="preprocessor"># For more information see the manual pages of crontab(5) and cron(8)</span></span><br><span class="line"><span class="preprocessor">#</span></span><br><span class="line"><span class="preprocessor"># m h  dom mon dow   command#</span></span><br><span class="line"><span class="number">0</span> <span class="number">3</span> * * * /bin/bash /root/backup/backup.sh</span><br></pre></td></tr></table></figure><br>以上命令表示每天早上3:00执行命令<code>/bin/bash /root/backup/backup.sh</code>。<br>如果没有设置服务器时区或者不知道服务器时间，可以通过命令<code>date</code>来查看服务器的当前时间。<br>设置完成后，重启cron服务：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sudo</span> service cron restart</span><br></pre></td></tr></table></figure></p>
<p>然后，定时任务就会自动执行了。</p>
<p>参考文章：</p>
<ol>
<li><a href="https://mynook.info/blog/post/host-your-own-git-server-using-gogs" target="_blank" rel="external">使用 Gogs 搭建自己的 Git 服务器</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-gogs-on-ubuntu-14-04" target="_blank" rel="external">How To Set Up Gogs on Ubuntu 14.04</a></li>
<li><a href="http://my.oschina.net/luyao/blog/375654?fromerr=xhqsCTAb" target="_blank" rel="external">阿里云上Ubuntu14.04-64位安装Gogs</a></li>
<li><a href="http://keenwon.com/449.html" target="_blank" rel="external">自动定时备份VPS – 如何搭建个人网站</a></li>
<li><a href="http://www.tennfy.com/3343.html" target="_blank" rel="external">定时备份VPS数据至Dropbox教程</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>Git是非常流行的版本管理系统，很多的网站也提供了免费的Git服务，如全球知名的最大源代码托管服务<a href="http://github.com">Github</a>。但是大部分的Git源代码托管服务都只对开放的代码托管免费，对私有的代码托管需要收取一定费用。同时，个人的一些代码有时由于各种原因可能并不适合开放，比如：练习用代码，对Git服务提供商的隐私性及安全性有所担忧，包含一些商业机密等等。此时可以搭建自己的Git服务器来托管代码。<br>]]>
    
    </summary>
    
      <category term="git" scheme="http://libhappy.com/tags/git/"/>
    
      <category term="gogs" scheme="http://libhappy.com/tags/gogs/"/>
    
      <category term="vps" scheme="http://libhappy.com/tags/vps/"/>
    
      <category term="备份" scheme="http://libhappy.com/tags/%E5%A4%87%E4%BB%BD/"/>
    
      <category term="Linux" scheme="http://libhappy.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux服务器的简单防护]]></title>
    <link href="http://libhappy.com/2015/12/vps-protect/"/>
    <id>http://libhappy.com/2015/12/vps-protect/</id>
    <published>2015-12-14T01:59:04.000Z</published>
    <updated>2015-12-21T10:01:13.626Z</updated>
    <content type="html"><![CDATA[<p>在购买自己的VPS之后，首先要做好的就是安全防护工作，本文将主要介绍以下方式来提高VPS的安全防护能力：</p>
<ul>
<li>修改ssh默认端口，开启密钥登陆并关闭简单密码登录</li>
<li>开启iptables防火墙，关闭不必要端口的入站连接</li>
</ul>
<a id="more"></a>
<!--toc-->
<h1 id="ssh设置">ssh设置</h1><h2 id="修改默认端口">修改默认端口</h2><p>修改/etc/ssh/sshd_config文件：<br><figure class="highlight vhdl"><figcaption><span>/etc/ssh/sshd_config</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># What ports, IPs <span class="keyword">and</span> protocols we listen <span class="keyword">for</span></span><br><span class="line"><span class="keyword">Port</span> <span class="number">12345</span></span><br></pre></td></tr></table></figure></p>
<p>将ssh默认端口<code>22</code>改为一个随机的端口。<br>注意：小于<code>1024</code>的端口为系统默认分配给特定服务的端口，不建议随意占用。</p>
<h2 id="禁用root登陆">禁用root登陆</h2><p>开启root用户登录使得攻击者可以轻易的猜到可登陆的用户名，同时使用高权限用户操作，如果操作错误容易引起无法恢复的系统错误。因此建议新建一个普通用户登陆，并加入sudo组，在需要时可执行高权限命令，或者直接切换到root用户操作。</p>
<h3 id="新建用户">新建用户</h3><p>新建用户testuser:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser testuser</span><br></pre></td></tr></table></figure></p>
<p>接下来会提示输入该用户的相关信息，显示如下：<br><figure class="highlight crmsh"><figcaption><span>adduser testuser</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Adding <span class="keyword">user</span> <span class="title">`testuser</span>' ...</span><br><span class="line">Adding new <span class="keyword">group</span> <span class="title">`testuser</span>' (<span class="number">1001</span>) ...</span><br><span class="line">Adding new <span class="keyword">user</span> <span class="title">`testuser</span>' (<span class="number">1001</span>) with <span class="keyword">group</span> <span class="title">`testuser</span>' ...</span><br><span class="line">Creating home directory `/home/testuser' ...</span><br><span class="line">Copying files from `/etc/skel' ...</span><br><span class="line">Enter new UNIX password:</span><br><span class="line">Retype new UNIX password:</span><br><span class="line">passwd: password updated successfully</span><br><span class="line">Changing the <span class="keyword">user</span> <span class="title">information</span> for testuser</span><br><span class="line">Enter the new value, <span class="operator">or</span> press ENTER for the default</span><br><span class="line">    Full Name []:</span><br><span class="line">    Room <span class="type">Number</span> []:</span><br><span class="line">    Work Phone []:</span><br><span class="line">    Home Phone []:</span><br><span class="line">    Other []:</span><br><span class="line">Is the <span class="number">inf</span>ormation correct? [Y/n] y</span><br></pre></td></tr></table></figure><br>按照提示输入相关信息后，确认信息正确，则该用户创建完成。</p>
<h3 id="将用户加入sudo组">将用户加入sudo组</h3><p>将用户加入sudo组，在需要执行高权限命令时可以直接在命令前加sudo执行。给某用户赋予sudo权限需要修改/etc/sudoers文件，但是sudoers文件一旦修改错误易造成系统权限混乱，因此不建议直接修改sudoers文件。事实上sudoers文件默认对所有用户（包括root用户）都是只读权限。修改sudoers文件建议通过程序<strong>visudo</strong>进行，visudo在修改sudoers文件之前会对用户的更改进行检测，当没有出现错误时再将修改写入sudoers文件。<br>以管理员权限执行命令visudo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visudo</span><br></pre></td></tr></table></figure></p>
<p>在<code># User privilege specification</code>行下加入如下行：<br><figure class="highlight apache"><figcaption><span>visudo</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># User privilege specification</span></span><br><span class="line"><span class="keyword">root</span>    <span class="literal">ALL</span>=(<span class="literal">ALL</span>:<span class="literal">ALL</span>) <span class="literal">ALL</span></span><br><span class="line"><span class="keyword">testuser</span>  <span class="literal">ALL</span>=(<span class="literal">ALL</span>:<span class="literal">ALL</span>) <span class="literal">ALL</span> # 加入这一行</span><br></pre></td></tr></table></figure><br>保存退出。</p>
<h3 id="禁用root登陆-1">禁用root登陆</h3><p>修改sshd_config文件，禁用root登陆<br><figure class="highlight nginx"><figcaption><span>/etc/ssh/sshd_config</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">PermitRootLogin</span> <span class="built_in">no</span></span><br></pre></td></tr></table></figure></p>
<p>然后重启ssh使配置生效：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure></p>
<p>注意：以上每次修改sshd_config后都可以重启ssh，然后退出当前ssh连接，再按照新的配置登陆ssh，以验证配置的正确。</p>
<h2 id="禁用简单密码登录，使用密钥登陆">禁用简单密码登录，使用密钥登陆</h2><p>禁用简单密码登录能够防止对服务器猜测密码的暴力破解。</p>
<h3 id="创建密钥">创建密钥</h3><p>首先要创建使用rsa算法加密的公私密钥：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></p>
<p>输出如下：<br><figure class="highlight gherkin"><figcaption><span>ssh-keygen -t rsa</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/home/testuser/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in ./test_rsa.</span><br><span class="line">Your public key has been saved in ./test_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx testuser<span class="comment">@vps</span></span><br><span class="line">The key's randomart image is:</span><br><span class="line">+--[ RSA 2048]----+</span><br><span class="line">|<span class="string">          xx.    </span>|</span><br><span class="line">|<span class="string"> .       ..      </span>|</span><br><span class="line">|<span class="string">  .x***..        </span>|</span><br><span class="line">|<span class="string">       .  .  *   </span>|</span><br><span class="line">|<span class="string">  ==   .-.       </span>|</span><br><span class="line">|<span class="string">     .    x      </span>|</span><br><span class="line">|<span class="string">X.  + &gt;_&lt;!       </span>|</span><br><span class="line">|<span class="string"> .X  *= - x      </span>|</span><br><span class="line">|<span class="string">.. ..+**         </span>|</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure></p>
<p>会提示输入密钥保存的位置与名称、密钥密码，密钥密码用以保护密钥，在使用密钥时同时需要输入该密码。如果私钥被窃取，没有密码也无法使用该密钥。如果不想要密码，在要求设置密码时直接按回车键跳过密码输入。</p>
<h3 id="上传公钥至服务器">上传公钥至服务器</h3><p>生成公私钥后，将公钥上传至服务器。如果是在服务器生成的密钥，则需要将私钥传回客户端并删除服务器上的私钥。<br>使用 scp 命令上传公钥：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ./ssh/id_rsa.pub usertest@remote_ssh:</span><br></pre></td></tr></table></figure></p>
<h3 id="设置密钥">设置密钥</h3><p>将上传的公钥保存到当前用户的<code>~/.ssh</code>目录下，并重命名为authorized_keys<br><figure class="highlight stylus"><figcaption><span>~</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv id_rsa<span class="class">.pub</span> ./.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>
<p>同时，为了安全可以设置.ssh目录以及authorized_keys的权限<br><figure class="highlight cpp"><figcaption><span>~</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">700</span> -R .ssh</span><br><span class="line">chmod <span class="number">400</span> ./.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>
<h3 id="启用密钥并禁用密码登录">启用密钥并禁用密码登录</h3><p>编辑/etc/ssh/sshd_config文件，修改以下项目：<br><figure class="highlight nginx"><figcaption><span>/etc/ssh/sshd_config</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">RSAAuthentication</span> <span class="built_in">yes</span>      <span class="comment">#RSA认证</span></span><br><span class="line">PubkeyAuthentication <span class="built_in">yes</span>   <span class="comment">#开启公钥验证</span></span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys <span class="comment">#验证文件路径</span></span><br><span class="line">PasswordAuthentication <span class="built_in">no</span>  <span class="comment">#禁止密码认证</span></span><br><span class="line">PermitEmptyPasswords <span class="built_in">no</span>    <span class="comment">#禁止空密码</span></span><br><span class="line">UsePAM <span class="built_in">no</span>                  <span class="comment">#禁用PAM</span></span><br></pre></td></tr></table></figure></p>
<p>然后保存，重启ssh服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/ssh restart</span><br></pre></td></tr></table></figure></p>
<p>现在，退出当前ssh连接，使用密钥就可以登录服务器了。</p>
<h1 id="iptables防火墙设置">iptables防火墙设置</h1><p>Ubuntu自带了非常简单但功能强大的防火墙iptables，如果不配置规则，默认是允许所有流量的。</p>
<h2 id="查看iptables列表">查看iptables列表</h2><p>用以下命令可以查看已经生效的iptables规则：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -L</span><br></pre></td></tr></table></figure></p>
<p>显示如下：<br><figure class="highlight lisp"><figcaption><span>sudo iptables -L</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Chain INPUT <span class="list">(<span class="keyword">policy</span> ACCEPT)</span></span><br><span class="line">target     prot opt source               destination</span><br><span class="line"></span><br><span class="line">Chain FORWARD <span class="list">(<span class="keyword">policy</span> ACCEPT)</span></span><br><span class="line">target     prot opt source               destination</span><br><span class="line"></span><br><span class="line">Chain OUTPUT <span class="list">(<span class="keyword">policy</span> ACCEPT)</span></span><br><span class="line">target     prot opt source               destination</span><br></pre></td></tr></table></figure></p>
<p>默认是没有任何规则的。也可以加上<code>-v</code>选项查看更为详细的信息。<br>命令ifconfig可以查看网络接口信息:<br><figure class="highlight cpp"><figcaption><span>ifconfig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>  Mask:<span class="number">255.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">          inet6 addr: ::<span class="number">1</span>/<span class="number">128</span> Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:<span class="number">65536</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">0</span></span><br><span class="line">          RX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)  TX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)</span><br><span class="line"></span><br><span class="line">venet0    Link encap:UNSPEC  HWaddr <span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span></span><br><span class="line">          inet addr:<span class="number">127.0</span><span class="number">.0</span><span class="number">.2</span>  P-t-P:<span class="number">127.0</span><span class="number">.0</span><span class="number">.2</span>  Bcast:<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>  Mask:<span class="number">255.255</span><span class="number">.255</span><span class="number">.255</span></span><br><span class="line">          UP BROADCAST POINTOPOINT RUNNING NOARP  MTU:<span class="number">1500</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">7054342</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">5911869</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">0</span></span><br><span class="line">          RX bytes:<span class="number">9292344012</span> (<span class="number">9.2</span> GB)  TX bytes:<span class="number">1060426275</span> (<span class="number">1.0</span> GB)</span><br><span class="line"></span><br><span class="line">venet0:<span class="number">0</span>  Link encap:UNSPEC  HWaddr <span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span>-<span class="number">00</span></span><br><span class="line">          inet addr:<span class="number">192.1</span><span class="number">.2</span><span class="number">.3</span>  P-t-P:<span class="number">192.1</span><span class="number">.2</span><span class="number">.3</span>  Bcast:<span class="number">192.1</span><span class="number">.2</span><span class="number">.3</span>  Mask:<span class="number">255.255</span><span class="number">.255</span><span class="number">.255</span></span><br><span class="line">          UP BROADCAST POINTOPOINT RUNNING NOARP  MTU:<span class="number">1500</span>  Metric:<span class="number">1</span></span><br></pre></td></tr></table></figure><br>其中<code>lo</code>代表本地回环地址，<code>venet0</code>是OpenVZ架构虚拟机中的第一块虚拟网卡，<code>venet0:0</code>是venet0的别名。</p>
<h2 id="iptables_命令解释">iptables 命令解释</h2><p>iptables常用命令解释：</p>
<ul>
<li>-A chain, –append  添加一条新规则</li>
<li>-D chain [rulenumder], –delete  删除一条规则</li>
<li>-I chain [rulenumder], –insert  插入一条规则</li>
<li>-R chain [rulenumber], –replace  替换一条规则</li>
<li>-L [chain [rulenumber]], –list  列出所有规则</li>
<li>-P, –policy 策略</li>
<li>-i, –in-interface  网络接口名称</li>
<li>-m match, –match  扩展匹配</li>
<li>-p proto, –protocol  协议，如’tcp’，’udp’</li>
<li>-j target, –jump 参数用来指定要进行的处理动作，常用的处理动作包括：ACCEPT、REJECT、DROP、REDIRECT、MASQUERADE等</li>
</ul>
<p>链(chain)：链是一些按顺序排列的规则的列表，iptables 默认的 filter 表包含 INPUT， OUTPUT 和 FORWARD 3条内建的链。</p>
<h2 id="允许连接">允许连接</h2><p>首先允许本地回环端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A INPUT -i lo -j ACCEPT</span><br></pre></td></tr></table></figure></p>
<p>允许建立关联连接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br></pre></td></tr></table></figure></p>
<p>允许访问特定端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A INPUT -p tcp --dport <span class="number">12345</span> -j ACCEPT</span><br></pre></td></tr></table></figure></p>
<p>如，允许ssh端口：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A INPUT -p tcp --dport <span class="number">22</span> -j ACCEPT</span><br><span class="line"><span class="comment"># 如果更改了默认ssh端口要更改为修改后的端口（如上文中的12345）</span></span><br></pre></td></tr></table></figure></p>
<p>允许FTP端口：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A INPUT -p tcp --dport <span class="number">21</span> -j ACCEPT</span><br><span class="line">sudo iptables -A INPUT -p tcp --dport <span class="number">20</span> -j ACCEPT</span><br></pre></td></tr></table></figure></p>
<p>同时开放多个端口：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A INPUT -p tcp -m multiport --dport <span class="number">20</span>,<span class="number">21</span> -j ACCEPT</span><br></pre></td></tr></table></figure></p>
<p>允许接收ping<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A INPUT -p icmp --icmp-type <span class="built_in">echo</span>-request -j ACCEPT</span><br></pre></td></tr></table></figure></p>
<p>接收ping后可以通过ping命令在本地服务端测试网络延迟，但是也会使其他人通过ping来知晓该服务器地址的可用性，如无特殊需要可以不接受所有ping。</p>
<h2 id="阻止其他连接">阻止其他连接</h2><p>最后，在以上允许连接的基础上阻止所有其他连接：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A INPUT -j REJECT</span><br><span class="line">sudo iptables -A FORWARD -j REJECT</span><br></pre></td></tr></table></figure></p>
<p><strong>注意</strong>：在阻止所有连接之前一定要将允许ssh端口的连接，否则规则生效后会直接断开ssh连接并且无法重新连接。这时只能进入管理后台取消该阻止规则，或者重装系统。</p>
<h2 id="编辑已存在规则">编辑已存在规则</h2><p>将所有的iptables规则以序号标记显示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -L -n --line-numbers</span><br></pre></td></tr></table></figure></p>
<p>显示如下：<br><figure class="highlight sql"><figcaption><span>sudo iptables -L -n --line-numbers</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination</span><br><span class="line">1    ACCEPT     tcp  <span class="comment">--  0.0.0.0/0            0.0.0.0/0            tcp dpt:12345</span></span><br><span class="line">2    ACCEPT     all  <span class="comment">--  0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED</span></span><br><span class="line">3    ACCEPT     tcp  <span class="comment">--  0.0.0.0/0            0.0.0.0/0            tcp dpt:20</span></span><br><span class="line">4    ACCEPT     udp  <span class="comment">--  0.0.0.0/0            0.0.0.0/0            multiport dports 2000,3000</span></span><br><span class="line">5    ACCEPT     all  <span class="comment">--  0.0.0.0/0            0.0.0.0/0</span></span><br><span class="line">6    <span class="operator"><span class="keyword">DROP</span>       all  <span class="comment">--  0.0.0.0/0            0.0.0.0/0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Chain</span> FORWARD (<span class="keyword">policy</span> <span class="keyword">ACCEPT</span>)</span><br><span class="line"><span class="keyword">num</span>  target     prot opt <span class="keyword">source</span>               destination</span><br><span class="line"></span><br><span class="line"><span class="keyword">Chain</span> <span class="keyword">OUTPUT</span> (<span class="keyword">policy</span> <span class="keyword">ACCEPT</span>)</span><br><span class="line"><span class="keyword">num</span>  target     prot opt <span class="keyword">source</span>               destination</span></span><br></pre></td></tr></table></figure></p>
<p>现在INPUT 链中已经有6条规则了，现在来修改已经存在的规则。</p>
<h3 id="删除一条规则">删除一条规则</h3><p>比如：删除第6条规则<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -D INPUT <span class="number">6</span></span><br></pre></td></tr></table></figure></p>
<h3 id="插入一条规则">插入一条规则</h3><p>在第2条规则之前插入一条规则<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -I INPUT <span class="number">2</span> -p tcp -i venet0 --dport <span class="number">1234</span> -j ACCEPT</span><br></pre></td></tr></table></figure></p>
<h2 id="保存规则与恢复规则">保存规则与恢复规则</h2><p>在Ubuntu上 iptables 默认是不会保存已经设置的规则，系统重启后所有规则将丢失，所以需要将已有规则保存下来。</p>
<h3 id="手动保存规则">手动保存规则</h3><figure class="highlight stata"><figcaption><span>root #</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 由于sudo只作用于其后跟的第一个命令，所以以下命令中<span class="string">"&gt;"</span>会因为没有写入权限而无法运行，所以直接切换到root用户运行命令。</span><br><span class="line"><span class="keyword">su</span> root</span><br><span class="line">iptables-<span class="keyword">save</span> &gt; /etc/iptables.<span class="keyword">input</span>.rules</span><br></pre></td></tr></table></figure>
<p>保存规则后，设置开机自动从文件恢复规则。编辑开机启动文件/etc/rc.local<br>在<code>exit 0</code>之前写入以下命令<br><figure class="highlight sql"><figcaption><span>/etc/rc.local</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables-<span class="operator"><span class="keyword">restore</span> &lt; /etc/iptables.<span class="keyword">input</span>.<span class="keyword">rules</span></span></span><br></pre></td></tr></table></figure><br>保存退出。</p>
<h3 id="自动保存规则">自动保存规则</h3><p>让网卡关闭时自动保存规则，网卡开启时自动恢复规则。<br>创建/etc/network/if-post-down.d/iptables 文件，添加如下内容：<br><figure class="highlight bash"><figcaption><span>/etc/network/if-post-down.d/iptables</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">iptables-save &gt; /etc/iptables.input.rules</span><br></pre></td></tr></table></figure><br>为文件添加执行权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /etc/network/<span class="keyword">if</span>-post-down.d/iptables</span><br></pre></td></tr></table></figure></p>
<p>创建/etc/network/if-pre-up.d/iptables 文件，添加如下内容：<br><figure class="highlight bash"><figcaption><span>/etc/network/if-pre-up.d/iptables</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">iptables-restore &lt; /etc/iptables.input.rules</span><br></pre></td></tr></table></figure><br>为文件添加执行权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /etc/network/<span class="keyword">if</span>-pre-up.d/iptables</span><br></pre></td></tr></table></figure></p>
<p>当网络关闭或开启时就会自动保存与恢复iptables规则。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在购买自己的VPS之后，首先要做好的就是安全防护工作，本文将主要介绍以下方式来提高VPS的安全防护能力：</p>
<ul>
<li>修改ssh默认端口，开启密钥登陆并关闭简单密码登录</li>
<li>开启iptables防火墙，关闭不必要端口的入站连接</li>
</ul>]]>
    
    </summary>
    
      <category term="Linux" scheme="http://libhappy.com/tags/Linux/"/>
    
      <category term="iptables" scheme="http://libhappy.com/tags/iptables/"/>
    
      <category term="ssh" scheme="http://libhappy.com/tags/ssh/"/>
    
      <category term="vps" scheme="http://libhappy.com/tags/vps/"/>
    
      <category term="Linux" scheme="http://libhappy.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用Hexo搭建静态博客（三）, 设置自定义域名]]></title>
    <link href="http://libhappy.com/2015/10/build-hexo-blog3/"/>
    <id>http://libhappy.com/2015/10/build-hexo-blog3/</id>
    <published>2015-10-30T14:32:02.000Z</published>
    <updated>2015-12-18T02:44:43.361Z</updated>
    <content type="html"><![CDATA[<p>在之前的文章中介绍了如何<a href="/2015/10/bulid-hexo-blog1/">用hexo来搭建静态博客</a>以及<a href="/2015/10/bulid-hexo-blog2/">将网页部署至github及gitcafe</a>。完成部署之后，可以通过github及gitcafe分配的pages二级域名来访问博客，比如<code>username.github.io</code>。通过将自己的博客绑定至自己购买的域名可以更加方便的访问，下面将介绍如何购买一个域名及将自定义域名绑定至github及gitcafe。<br><a id="more"></a><br><!--toc--></p>
<h1 id="购买域名">购买域名</h1><p>首先要购买一个域名，推荐比较出名的国外域名服务商，比如<a href="https://www.godaddy.com/" target="_blank" rel="external">GoDaddy</a>。其他的如<a href="https://www.namesilo.com/" target="_blank" rel="external">namesilo</a>、<a href="https://www.name.com/" target="_blank" rel="external">name.com</a>价格比较便宜, 当然国内的域名提供商也是可以的。</p>
<h1 id="设置域名解析服务">设置域名解析服务</h1><p>购买到心仪的域名后进入域名设置页面设置域名解析服务。由于godaddy的域名解析服务位于国外，速度稍有影响，因此可以使用国内的免费域名解析服务<a href="https://www.dnspod.cn/" target="_blank" rel="external">DNSPod</a>，同时DNSPod还支持根据不同线路解析到不同地址，因此可以利用此功能针对不同地区的访问者分别解析到github及gitcafe以提高访问速度。</p>
<p>使用DNSPod来进行域名解析首先要将域名解析服务商(nameserver)地址更换为DNSPod提供的地址:<br><figure class="highlight stylus"><figcaption><span>nameserver</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F1G1NS1<span class="class">.DNSPOD</span><span class="class">.NET</span></span><br><span class="line">F1G1NS2<span class="class">.DNSPOD</span><span class="class">.NET</span></span><br></pre></td></tr></table></figure></p>
<p>GoDaddy的具体设置可以查看DNSPod上的<a href="https://support.dnspod.cn/Kb/showarticle/?qtype=%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B&amp;tsid=42" target="_blank" rel="external">帮助教程</a>。</p>
<h1 id="设置CNAME">设置CNAME</h1><h2 id="github设置CNAME">github设置CNAME</h2><p>github的CNAME设置需要在github pages 的根目录下创建CNAME文件并在其中写入自定义域名，但是直接在github pages中创建，下次通过git push提交博客后会被删除。因此需要在Hexo的source目录下的创建CNAME文件，并在其中写入自定义域名。之后每次提交博客时会随之提交CNAME文件。</p>
<h2 id="gitcafe设置CNAME">gitcafe设置CNAME</h2><p>gitcafe的CNAME更为方便，登陆gitcafe后在<code>项目管理</code>–<code>域名管理</code>下的<code>自定义域名</code>中添加自定义域名即可。</p>
<h1 id="设置DNS解析">设置DNS解析</h1><p>最后需要注册DNSPod并设置DNS解析。之前已经在Godaddy中将域名解析服务设置为DNSPod。直接登陆DNSPod，添加自定义域名，在添加的域名中添加如下记录：<br><div class="figure center"><img class="fig-img" src="https://farm1.staticflickr.com/678/22594923969_f316996f4b_z.jpg" width="" height="" alt="dnspod-setting" title="DNSPod域名解析记录设置"><span class="caption">DNSPod域名解析记录设置</span></div><br>这样设置可以区分不同的地区分别访问托管在github及gitcafe上的博客，加快博客访问速度。如果只是使用其中一项服务，只需添加对应记录即可。</p>
<p>等待域名解析生效（一般需要几分钟到一天不等）后，就可以用自定义的域名直接访问博客了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在之前的文章中介绍了如何<a href="/2015/10/bulid-hexo-blog1/">用hexo来搭建静态博客</a>以及<a href="/2015/10/bulid-hexo-blog2/">将网页部署至github及gitcafe</a>。完成部署之后，可以通过github及gitcafe分配的pages二级域名来访问博客，比如<code>username.github.io</code>。通过将自己的博客绑定至自己购买的域名可以更加方便的访问，下面将介绍如何购买一个域名及将自定义域名绑定至github及gitcafe。<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://libhappy.com/tags/hexo/"/>
    
      <category term="博客" scheme="http://libhappy.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="域名" scheme="http://libhappy.com/tags/%E5%9F%9F%E5%90%8D/"/>
    
      <category term="Hexo" scheme="http://libhappy.com/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用Hexo搭建静态博客（二）, 将网页部署至github与gitcafe并使用SSH认证]]></title>
    <link href="http://libhappy.com/2015/10/build-hexo-blog2/"/>
    <id>http://libhappy.com/2015/10/build-hexo-blog2/</id>
    <published>2015-10-27T08:31:14.000Z</published>
    <updated>2015-12-16T05:01:39.144Z</updated>
    <content type="html"><![CDATA[<p>在<a href="/2015/10/bulid-hexo-blog1/">上一篇</a>文章中介绍了如何在本地搭建Hexo以及用Hexo书写博客的基本操作。在这篇文章中将介绍如何将创建的博客发布至github及gitcafe的静态页面。通过为github及gitcafe添加ssh验证来跳过推送页面时输入用户名及密码。<br><a id="more"></a><br><!--toc--></p>
<h1 id="注册github及gitcafe账号">注册github及gitcafe账号</h1><p>github及gitcafe都支持pages网页托管服务，首先选择要托管的服务注册账号。当然也可以同时将博客发布至github和gitcafe，对于国内及国外不同用户分别访问不同的服务上的博客。</p>
<h1 id="将博客发布至github">将博客发布至github</h1><p>创建github pages的详细方法可以参考官方<a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="external">帮助页面</a>。</p>
<h2 id="创建新的代码仓库">创建新的代码仓库</h2><p>新代码仓库(repository)名必须为<code>username.github.io</code>，其中<code>username</code>为注册github的用户名。</p>
<h2 id="设置用户名及邮箱">设置用户名及邮箱</h2><p>Hexo目录下的<code>.deploy_git</code>文件夹即为需要发布的文件，这是一个git目录。在发布至github之前需要先设置git的用户名及邮箱地址。<br><figure class="highlight stylus"><figcaption><span>D:\hexo\.deploy_git</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user<span class="class">.name</span> <span class="string">"your name"</span></span><br><span class="line">git config --global user<span class="class">.eamil</span> <span class="string">"user@email.com"</span></span><br></pre></td></tr></table></figure></p>
<p>这个命令设置了计算机中全局默认的用户名及邮箱，如果计算机中只有一个git账号的代码，这样设置该账号下的其他仓库时可以不用再进行设置。<br>但计算机中有多个账号的仓库代码要通过git同步时，就应该只设置该目录下git仓库的用户名及邮箱：<br><figure class="highlight stylus"><figcaption><span>D:\hexo\.deploy_git</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user<span class="class">.name</span> <span class="string">"your name"</span></span><br><span class="line">git config user<span class="class">.eamil</span> <span class="string">"your@email"</span></span><br></pre></td></tr></table></figure></p>
<h2 id="设置远程仓库地址">设置远程仓库地址</h2><p>将远程仓库地址设置为新建的代码仓库，然后将网页推送至远程仓库：<br><figure class="highlight stylus"><figcaption><span>D:\hexo\.deploy_git</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github<span class="class">.com</span>:username<span class="class">.github</span><span class="class">.io</span></span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></p>
<p>一段时间后，直接访问网址<code>username.github.io</code>就可以看到刚发布的博客了。</p>
<h2 id="设置Hexo配置文件">设置Hexo配置文件</h2><p>配置Hexo的站点配置文件，加入远程仓库的信息，以后更新博客时只用执行 <code>hexo d</code>就可以将博客发布到远端了。<br><figure class="highlight less"><figcaption><span>D:\hexo\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repository</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:username.github.io #你的GitHub Pages仓库</span><br><span class="line">  <span class="attribute">branch</span>: master #要推送的分支，github pages默认为master</span><br></pre></td></tr></table></figure></p>
<h1 id="将博客发布至gitcafe">将博客发布至gitcafe</h1><p>由于github 的连接速度并不理想，如果只是面向国内用户，可以将博客发布至gitcafe的pages服务。详细内容可以查看gitcafe的官方<a href="https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9" target="_blank" rel="external">帮助文档</a>，具体操作流程与github大同小异。<br>需要注意的是：gitcafe pages 的默认分支为<code>gitcafe-pages</code>，因此推送时要使用<code>gitcafe-pages</code>作为远端分支：<br><figure class="highlight stylus"><figcaption><span>D:\hexo\.deploy_git</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@gitcafe<span class="class">.com</span>:username<span class="class">.gitcafe</span><span class="class">.io</span></span><br><span class="line">git checkout -<span class="tag">b</span> gitcafe-pages</span><br><span class="line">git pull origin gitcafe-pages</span><br></pre></td></tr></table></figure></p>
<p>同时Hexo配置文件中的<code>branch</code>也要改为<code>gitcafe-pages</code>。<br><figure class="highlight less"><figcaption><span>D:\hexo\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repository</span>: git<span class="variable">@gitcafe</span>.<span class="attribute">com</span>:username.gitcafe.io #你的GitCafe Pages仓库</span><br><span class="line">  <span class="attribute">branch</span>: gitcafe-pages #要推送的分支，gitcafe pages默认为gitcafe-pages</span><br></pre></td></tr></table></figure></p>
<p>发布后稍等片刻，直接访问<code>username.gitcafe.io</code>就可以看到刚发布的博客了。</p>
<h1 id="同时将博客发布至github与gitcafe">同时将博客发布至github与gitcafe</h1><p>如果同时设置了github及gitcafe，也可以将博客同时发布至两个服务。但是本地仓库的信息相同，因此需要使用相同的邮箱注册两个服务。在设置好远端服务后，如下修改Hexo站点配置文件：<br><figure class="highlight less"><figcaption><span>D:\hexo\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>:</span><br><span class="line">    <span class="attribute">github</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:username.github.io, master</span><br><span class="line">    <span class="attribute">gitcafe</span>: git<span class="variable">@gitcafe</span>.<span class="attribute">com</span>:username.gitcafe.io, gitcafe-pages</span><br></pre></td></tr></table></figure></p>
<p>然后<code>hexo d</code>发布博客后，分别打开对应服务的网址就可以看到发布的博客了。</p>
<h1 id="使用ssh密钥登陆">使用ssh密钥登陆</h1><p>使用ssh密钥登陆github和gitcafe可以跳过密码输入，如果同时拥有两个服务也可以设置不同的密钥登陆，提升安全性。</p>
<h2 id="生成ssh密钥">生成ssh密钥</h2><p>切换到ssh默认的密匙保存目录<code>C:\Users\username\.ssh</code>，如果不存在则手动创建。<br>用以下命令生成与邮箱<code>user@email.com</code>（即注册github及gitcafe的邮箱）对应的密钥：<br><figure class="highlight mathematica"><figcaption><span>C:\Users\username\.ssh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -<span class="keyword">C</span> <span class="string">"user@email.com"</span></span><br></pre></td></tr></table></figure></p>
<p>首先会提示输入密钥名称<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa <span class="keyword">key</span> pair.</span><br><span class="line">Enter file <span class="keyword">in</span> which <span class="keyword">to</span> save the <span class="keyword">key</span> (/c/Users/username/.ssh/id_rsa):</span><br></pre></td></tr></table></figure></p>
<p>如果没有设置过ssh密钥，使用默认的<code>id_rsa</code>即可。同时如果想在github及gitcafe上启用不同的密钥，在生成密钥时应采用不同的名称便于区分。<br>之后会提示输入密钥密码，该密码用来加密密钥，使用此密钥时需要输入该密码，留空则表示不使用密码。<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> <span class="literal">no</span> passphrase):</span><br><span class="line">Enter same passphrase <span class="attribute">again</span>:</span><br></pre></td></tr></table></figure></p>
<p>然后会提示你成功生成了密钥，假设此时生成的密钥对为<code>github_rsa</code>与<code>github_rsa.pub</code>。相应的也可以为gitcafe网站生成不同的密钥对。</p>
<h2 id="将公钥上传至github及gitcafe">将公钥上传至github及gitcafe</h2><p>登陆github，打开<code>Settings</code>中的<code>SSH keys</code>点击<code>Add SSH key</code>，输入SSH key的名称，将.pub文件中的内容全部粘贴至<code>Key</code>中，点击<code>Add key</code>保存这个密钥。<br>gitcafe 中的设置完全相同，只是其SSH key管理的设置在<code>账户设置</code>–<code>SSH 公钥管理</code>中，相同的方式添加.pub公钥的信息即可。</p>
<h2 id="设置ssh用户配置文件">设置ssh用户配置文件</h2><p>在ssh用户配置文件<code>C:\Users\username\.ssh\config</code>中指定对应服务所使用的私钥，如果该配置文件不存在则直接新建一个。<br><figure class="highlight stylus"><figcaption><span>C:\Users\username\.ssh\config</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#github</span></span><br><span class="line">Host github<span class="class">.com</span>  #昵称</span><br><span class="line">    HostName github<span class="class">.com</span> #指代的网址</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~/.ssh/github_rsa #认证私钥路径</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line"></span><br><span class="line"><span class="id">#gitcafe</span></span><br><span class="line">Host gitcafe<span class="class">.com</span></span><br><span class="line">    HostName gitcafe<span class="class">.com</span></span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~/.ssh/gitcafe_rsa</span><br><span class="line">    PreferredAuthentications publickey</span><br></pre></td></tr></table></figure></p>
<p><strong>注意</strong>其中昵称是对应条目的代号，可以随便设置，在git中如果地址中出现该代号将被替换为对应的<code>HostName</code>并用指定的私钥进行认证。因此若计算机中有两个github账户需要用不同的ssh key进行认证，可以如下设置：<br><figure class="highlight crmsh"><figcaption><span>C:\Users\username\.ssh\config</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#github 01</span></span><br><span class="line">Host github01  <span class="comment">#昵称</span></span><br><span class="line">    HostName github.com <span class="comment">#指代的网址</span></span><br><span class="line">    <span class="keyword">User</span> <span class="title">git</span></span><br><span class="line">    IdentityFile ~/.ssh/<span class="number">01</span>_rsa <span class="comment">#认证私钥路径</span></span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line"></span><br><span class="line"><span class="comment">#github 02</span></span><br><span class="line">Host github02  <span class="comment">#昵称</span></span><br><span class="line">    HostName github.com <span class="comment">#指代的网址</span></span><br><span class="line">    <span class="keyword">User</span> <span class="title">git</span></span><br><span class="line">    IdentityFile ~/.ssh/<span class="number">02</span>_rsa <span class="comment">#认证私钥路径</span></span><br><span class="line">    PreferredAuthentications publickey</span><br></pre></td></tr></table></figure></p>
<p>在设置git远端地址或登陆时，用对应的昵称代替地址中的<code>github.com</code>，比如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github01:username<span class="class">.github</span><span class="class">.io</span></span><br><span class="line">git remote add origin git@github02:username<span class="class">.github</span><span class="class">.io</span></span><br></pre></td></tr></table></figure></p>
<h2 id="测试_ssh_配置是否正确">测试 ssh 配置是否正确</h2><p>经过以上设置后应该可以用ssh登陆github及gitcafe，用以下命令可以测试配置是否正确。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试github</span></span><br><span class="line"><span class="title">ssh</span> -T git<span class="variable">@github</span>.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试gitcafe</span></span><br><span class="line">ssh -T git<span class="variable">@gitcafe</span>.com</span><br></pre></td></tr></table></figure></p>
<p>如果连接成功，会提示以下信息：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># github</span></span><br><span class="line">Hi USERNAME! Yo<span class="string">u've successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"></span><br><span class="line"># gitcafe</span><br><span class="line">Hi USERNAME! You'</span>ve successfully authenticated, but GitCafe does <span class="keyword">not</span> provide shell access.</span><br></pre></td></tr></table></figure></p>
<p>测试通过后，就可以使用ssh key来发布博客及提交代码而无需输入密码了。</p>
<p>本文主要介绍了如何将Hexo博客发布至github及gitcafe，以及配置多对ssh公私钥进行git认证。下一篇文章中将介绍如何购买域名及为托管在github及gitcafe上的博客设置自定义域名。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在<a href="/2015/10/bulid-hexo-blog1/">上一篇</a>文章中介绍了如何在本地搭建Hexo以及用Hexo书写博客的基本操作。在这篇文章中将介绍如何将创建的博客发布至github及gitcafe的静态页面。通过为github及gitcafe添加ssh验证来跳过推送页面时输入用户名及密码。<br>]]>
    
    </summary>
    
      <category term="github" scheme="http://libhappy.com/tags/github/"/>
    
      <category term="hexo" scheme="http://libhappy.com/tags/hexo/"/>
    
      <category term="ssh" scheme="http://libhappy.com/tags/ssh/"/>
    
      <category term="博客" scheme="http://libhappy.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="http://libhappy.com/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用Hexo搭建静态博客（一）, Hexo的搭建]]></title>
    <link href="http://libhappy.com/2015/10/bulid-hexo-blog1/"/>
    <id>http://libhappy.com/2015/10/bulid-hexo-blog1/</id>
    <published>2015-10-26T02:38:40.000Z</published>
    <updated>2015-12-16T05:00:58.329Z</updated>
    <content type="html"><![CDATA[<p><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> 是一个基于Node.js的开源静态博客程序，通过markdown书写文章，生成的静态网页可以托管在github及gitcafe上。通过<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>可以方便的创建自己的博客，本博客即使用Hexo创建并托管在github及gitcafe上。<br><a id="more"></a><br><!--toc--></p>
<h1 id="依赖程序的安装">依赖程序的安装</h1><p>Hexo 基于Node.js，其部署通过Git进行，以下程序的安装过程仅以Windows平台为例。</p>
<h2 id="安装_Node-js">安装 Node.js</h2><p>到<a href="https://nodejs.org/" target="_blank" rel="external">Node.js</a> 官网下载安装包，直接双击安装。</p>
<h2 id="安装_Git">安装 Git</h2><p>到<a href="https://git-scm.com/downloads" target="_blank" rel="external">Git</a>官网下载安装包，直接双击安装。</p>
<h2 id="验证安装是否正确">验证安装是否正确</h2><p>在开始菜单中打开<code>Git Bash</code>，输入：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">git</span> <span class="tag">--version</span></span><br><span class="line"><span class="tag">git</span> <span class="tag">version</span> 2<span class="class">.5</span><span class="class">.2</span><span class="class">.windows</span><span class="class">.2</span></span><br></pre></td></tr></table></figure></p>
<p>如果如上显示正确的版本号则Git 已正确安装。<br>输入：<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br><span class="line"><span class="number">2.14</span>.<span class="number">7</span></span><br></pre></td></tr></table></figure></p>
<p>显示对应版本号则表示Node.js 已正确安装。</p>
<h1 id="安装与部署_Hexo">安装与部署 Hexo</h1><h2 id="安装Hexo">安装Hexo</h2><p>打开<code>Git Bash</code> 通过npm命令即可安装Hexo：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-cli -<span class="keyword">g</span></span><br><span class="line">npm <span class="keyword">install</span> hexo <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="初始化_Hexo">初始化 Hexo</h2><p>打开<code>Git Bash</code>并切换到想要存放Hexo的目录下，执行以下命令将在该目录下新建文件夹<code>&lt;folder&gt;</code>并在该文件夹中初始化Hexo：<br><figure class="highlight xml"><figcaption><span>D:\</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init <span class="tag">&lt;<span class="title">folder</span>&gt;</span></span><br><span class="line">cd <span class="tag">&lt;<span class="title">folder</span>&gt;</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p>
<p>新建完成后，指定文件夹的目录如下：<br><figure class="highlight bash"><figcaption><span>D:\hexo</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml   <span class="comment">#主配置文件</span></span><br><span class="line">├── package.json  <span class="comment">#应用数据，不建议手动修改</span></span><br><span class="line">├── .deploy       <span class="comment">#将部署的静态文件，为git同步目录</span></span><br><span class="line">├── node_modules  <span class="comment">#Hexo安装的所有插件</span></span><br><span class="line">├── scaffolds     <span class="comment">#(脚手架)新建文章的模板文件</span></span><br><span class="line">├── scripts       <span class="comment">#自定义的随程序运行的脚本文件</span></span><br><span class="line">├── <span class="built_in">source</span>        <span class="comment">#博客源文件，文章markdown文件、404和CNAME文件等</span></span><br><span class="line">|   ├── _drafts   <span class="comment">#文章草稿，不会被转换为html</span></span><br><span class="line">|   └── _posts    <span class="comment">#发表的文章</span></span><br><span class="line">└── themes        <span class="comment">#主题文件夹</span></span><br></pre></td></tr></table></figure></p>
<h2 id="本地查看Hexo_博客">本地查看Hexo 博客</h2><p>执行以下命令打开Hexo 本地服务器<br><figure class="highlight livecodeserver"><figcaption><span>D:\hexo</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br><span class="line">INFO  Hexo is running <span class="keyword">at</span> <span class="keyword">http</span>://<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">4000</span>/. Press Ctrl+C <span class="built_in">to</span> <span class="built_in">stop</span>.</span><br></pre></td></tr></table></figure></p>
<p>在浏览器中打开网址<code>localhost:4000</code>就可以查看默认的Hexo博客。</p>
<h2 id="安装_Hexo_插件">安装 Hexo 插件</h2><p>Hexo 提供了许多插件以提供不同的功能，<a href="https://hexo.io/plugins/" target="_blank" rel="external">插件列表</a>列出了可用的插件。以安装<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">hexo-generator-feed</a>插件为例。<br>该插件可以为博客增加rss订阅支持，在博客目录下打开命令行，输入以下命令即可安装该插件：<br><figure class="highlight sql"><figcaption><span>D:\hexo</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-generator-feed <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure></p>
<p>安装完成后在主目录的配置文件中可以配置该插件的功能：<br><figure class="highlight crmsh"><figcaption><span>D:\hexo\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  <span class="operator">type</span>: atom</span><br><span class="line">  path: atom.<span class="keyword">xml</span></span><br><span class="line">  <span class="title">limit</span>: <span class="number">20</span></span><br></pre></td></tr></table></figure></p>
<p>然后在页面添加对atom.xml文件的链接即可。<br>其他插件的功能、安装及配置可以查看<a href="https://hexo.io/plugins/" target="_blank" rel="external">插件列表</a>详细了解。</p>
<h2 id="安装_Hexo_主题">安装 Hexo 主题</h2><p>通过安装不同的主题，可以方便的使博客拥有不同的外观，官方的<a href="https://hexo.io/themes/" target="_blank" rel="external">主题列表</a>列举一些主题。<br>一款非常流行的Hexo主题<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">NexT</a>:<br><iframe src="http://notes.iissnan.com/" width="800" height="600" frameborder="0" allowfullscreen></iframe></p>
<p>另一款流行的主题<a href="https://github.com/wuchong/jacman" target="_blank" rel="external">Jacman</a>:<br><iframe src="http://wuchong.me/jacman/" width="800" height="600" frameborder="0" allowfullscreen></iframe></p>
<p>安装Hexo主题十分简单，首先下载主题后解压到主目录下的<code>themes</code>文件夹，建议使用<code>git clone</code>的方式安装主题，便于更新。<br>以安装NexT主题为例，打开命令行，切换到Hexo主目录下：<br><figure class="highlight vim"><figcaption><span>D:\hexo</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/iissnan/hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure></p>
<p>完成后，主题已被下载到了<code>themes\next</code>目录下。<br>当需要更新主题时，执行以下命令即可：<br><figure class="highlight vim"><figcaption><span>D:\hexo</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> themes/<span class="keyword">next</span></span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></p>
<p>之后更改主目录中的配置文件<code>_config.yml</code>应用新主题，修改其中的<code>theme</code>字段的值即可：<br><figure class="highlight autoit"><figcaption><span>D:\hexo\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">theme: <span class="keyword">next</span></span><br><span class="line"><span class="preprocessor"># 注意所有参数名后的冒号“:”后面必须有一个空格</span></span><br></pre></td></tr></table></figure></p>
<p>然后重新生成网页文件即可：<br><figure class="highlight vala"><figcaption><span>D:\hexo</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># 清除已经生成的缓存网页文件，只是新增文章时可以不执行该命令</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="preprocessor"># 生成网页文件，如果生成网页文件有问题，可以尝试先执行上一个clean命令清除缓存再重新生成</span></span><br><span class="line">hexo generate</span><br></pre></td></tr></table></figure></p>
<p><code>hexo generate</code> 也可以用短命令 <code>hexo g</code> 代替。</p>
<p>之后打开本地服务器，查看应用新主题后的博客效果。<br><figure class="highlight axapta"><figcaption><span>D:\hexo</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Hexo_的使用">Hexo 的使用</h1><p>用Hexo书写博客的流程为：</p>
<ol>
<li><code>hexo new &quot;post-name&quot;</code>按照模板文件生成新的文章，该文件位于<code>source/_posts</code>文件夹中</li>
<li>按照<strong>markdown</strong>语法编辑post-name.md文件</li>
<li><code>hexo generate</code>生成新的网页文件</li>
<li><code>hexo deploy</code>部署生成的网页文件</li>
</ol>
<h2 id="Hexo常用命令">Hexo常用命令</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo help                  <span class="preprocessor">#查看hexo所有命令及帮助</span></span><br><span class="line">hexo init                  <span class="preprocessor">#初始化一个目录</span></span><br><span class="line">hexo <span class="keyword">new</span> <span class="string">"post_Name"</span>       <span class="preprocessor">#新建文章</span></span><br><span class="line">hexo <span class="keyword">new</span> page <span class="string">"page_Name"</span>  <span class="preprocessor">#新建页面</span></span><br><span class="line">hexo generate              <span class="preprocessor">#生成网页, 可以在 public 目录查看整个网站的文件</span></span><br><span class="line">hexo <span class="keyword">server</span>                <span class="preprocessor">#打开本地服务器，预览博客</span></span><br><span class="line">hexo deploy                <span class="preprocessor">#部署生成的博客至远端服务器</span></span><br><span class="line">hexo clean                 <span class="preprocessor">#清除缓存网页文件,如果生成的网页有问题可以用此命令清除缓存后重新生成</span></span><br></pre></td></tr></table></figure>
<p>Hexo 中的某些常用命令还支持简写：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n &lt;=&gt; hexo <span class="keyword">new</span></span><br><span class="line">hexo g &lt;=&gt; hexo generate</span><br><span class="line">hexo s &lt;=&gt; hexo server</span><br><span class="line">hexo d &lt;=&gt; hexo deploy</span><br></pre></td></tr></table></figure></p>
<p>本文主要介绍了Hexo博客本地应用程序的安装以及基本应用，在下一篇文章中将介绍将Hexo生成的博客部署至github及gitcafe上及自定义域名的绑定。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://hexo.io/">Hexo</a> 是一个基于Node.js的开源静态博客程序，通过markdown书写文章，生成的静态网页可以托管在github及gitcafe上。通过<a href="https://hexo.io/">Hexo</a>可以方便的创建自己的博客，本博客即使用Hexo创建并托管在github及gitcafe上。<br>]]>
    
    </summary>
    
      <category term="blog" scheme="http://libhappy.com/tags/blog/"/>
    
      <category term="hexo" scheme="http://libhappy.com/tags/hexo/"/>
    
      <category term="静态博客" scheme="http://libhappy.com/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="http://libhappy.com/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python中的super使用]]></title>
    <link href="http://libhappy.com/2015/08/python-usage-super/"/>
    <id>http://libhappy.com/2015/08/python-usage-super/</id>
    <published>2015-08-16T01:46:43.000Z</published>
    <updated>2015-12-16T05:00:40.643Z</updated>
    <content type="html"><![CDATA[<p>Python中子类要调用父类的方法（method），在python2.2之前通常的写法如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__inti__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"enter A"</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"leave A"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"enter B"</span></span><br><span class="line">        A.__init__(self)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"leave B"</span></span><br></pre></td></tr></table></figure>
<p>即使用非绑定的类方法（用类名来引用），并在参数列表中引入待绑定的对象（self），从而达到调用父类的目的。这样做的缺点是，当一个子类的父类发生变化时（如类B的父类由A变为C时），必须遍历整个类定义，把所有的通过非绑定的方法的类名全部替换过来。</p>
<p>自python2.2开始，python添加了一个关键字<strong>super</strong>来解决这个问题。官方说明如下：<br><a id="more"></a></p>
<blockquote>
<p>super(type[, object-or-type])</p>
<p>Return the superclass of type. If the second argument is omitted the super object returned is unbound. If the second argument is an object,  isinstance(obj, type) must be true. If the second argument is a type, issubclass(type2, type) must be true. super() only works for new-style classes.</p>
<p>A typical use for calling a cooperative superclass method is:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(B)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">meth</span><span class="params">(self, arg)</span>:</span></span><br><span class="line">        super(C, self).meth(arg)</span><br></pre></td></tr></table></figure>
<p>New in version 2.2.</p>
</blockquote>
<p>因此改写后的类B代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span>    <span class="comment"># A must be new-style class</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"enter A"</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"leave A"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(C)</span>:</span>     <span class="comment"># A --&gt; C</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"enter B"</span></span><br><span class="line">        super(B, self).__init__()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"leave B"</span></span><br></pre></td></tr></table></figure>
<p>其运行结果与第一种方法一致。</p>
<hr>
<p>super的引入同时也解决了涉及多继承情况时父类的多次调用问题，考虑如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">         <span class="keyword">print</span> <span class="string">"Enter A"</span></span><br><span class="line">         <span class="keyword">print</span> <span class="string">"Leave A"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Enter B"</span></span><br><span class="line">        A.__init__(self)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Leave B"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Enter C"</span></span><br><span class="line">        A.__init__(self)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Leave C"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Enter D"</span></span><br><span class="line">        A.__init__(self)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Leave D"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span><span class="params">(B, C, D)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Enter E"</span></span><br><span class="line">        B.__init__(self)</span><br><span class="line">        C.__init__(self)</span><br><span class="line">        D.__init__(self)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Leave E"</span></span><br><span class="line"></span><br><span class="line">e = E()</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Enter E</span><br><span class="line">Enter B</span><br><span class="line">Enter A</span><br><span class="line">Leave A</span><br><span class="line">Leave B</span><br><span class="line">Enter C</span><br><span class="line">Enter A</span><br><span class="line">Leave A</span><br><span class="line">Leave C</span><br><span class="line">Enter D</span><br><span class="line">Enter A</span><br><span class="line">Leave A</span><br><span class="line">Leave D</span><br><span class="line">Leave E</span><br></pre></td></tr></table></figure>
<p>其中公共父类A被执行了多次。<br>将其中的类名引用换为super:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">         <span class="keyword">print</span> <span class="string">"Enter A"</span></span><br><span class="line">         <span class="keyword">print</span> <span class="string">"Leave A"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Enter B"</span></span><br><span class="line">        super(B, self)__init__()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Leave B"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Enter C"</span></span><br><span class="line">        super(C, self)__init__()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Leave C"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Enter D"</span></span><br><span class="line">        super(D, self)__init__()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Leave D"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span><span class="params">(B, C, D)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Enter E"</span></span><br><span class="line">        super(E, self)__init__()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Leave E"</span></span><br><span class="line"></span><br><span class="line">e = E()</span><br></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Enter E</span><br><span class="line">Enter B</span><br><span class="line">Enter C</span><br><span class="line">Enter D</span><br><span class="line">Enter A</span><br><span class="line">Leave A</span><br><span class="line">Leave D</span><br><span class="line">Leave C</span><br><span class="line">Leave B</span><br><span class="line">Leave E</span><br></pre></td></tr></table></figure>
<p>在super机制中能够保证公共父类仅被执行一次，且执行的顺序按照MRO进行（E.__mro__）。</p>
<hr>
<p>super在使用中有下列需要注意的地方：</p>
<ol>
<li>super并不是一个函数，是一个类名，形如super(B, self)事实上调用了super类的初始化函数，产生了一个super对象；</li>
<li>super类的初始化函数并没有做什么特殊的操作，只是简单记录了类类型和具体实例；</li>
<li>super(B, self).func的调用并不是用于调用当前类的父类的func函数；</li>
<li>Python的多继承类是通过mro的方式来保证各个父类的函数被逐一调用，而且保证每个父类函数只调用一次（如果每个类都使用super）；</li>
<li>混用super类和非绑定的函数是一个危险行为，这可能导致应该调用的父类函数没有调用或者一个父类函数被调用多次。</li>
</ol>
<hr>
<p>参考资料：</p>
<ol>
<li><a href="http://www.jb51.net/article/66912.htm" title="Python 中的super用法详解" target="_blank" rel="external">Python 中的super用法详解</a></li>
<li><a href="http://www.cnblogs.com/dkblog/archive/2011/02/24/1980654.html" title="关于Python的super用法研究" target="_blank" rel="external">关于Python的super用法研究</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>Python中子类要调用父类的方法（method），在python2.2之前通常的写法如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__inti__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"enter A"</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"leave A"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"enter B"</span></span><br><span class="line">        A.__init__(self)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"leave B"</span></span><br></pre></td></tr></table></figure>
<p>即使用非绑定的类方法（用类名来引用），并在参数列表中引入待绑定的对象（self），从而达到调用父类的目的。这样做的缺点是，当一个子类的父类发生变化时（如类B的父类由A变为C时），必须遍历整个类定义，把所有的通过非绑定的方法的类名全部替换过来。</p>
<p>自python2.2开始，python添加了一个关键字<strong>super</strong>来解决这个问题。官方说明如下：<br>]]>
    
    </summary>
    
      <category term="python" scheme="http://libhappy.com/tags/python/"/>
    
      <category term="super" scheme="http://libhappy.com/tags/super/"/>
    
      <category term="Python" scheme="http://libhappy.com/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python 类的多重继承]]></title>
    <link href="http://libhappy.com/2015/08/python-class-re-order/"/>
    <id>http://libhappy.com/2015/08/python-class-re-order/</id>
    <published>2015-08-15T08:14:10.000Z</published>
    <updated>2015-12-16T04:53:08.125Z</updated>
    <content type="html"><![CDATA[<p>Python 的类分为经典类与新式类。Python2.7之前的版本中可以采用经典类，经典类继承父类的顺序采用深度优先算法，但在Python3之后的版本就只承认新式类了。新式类在python2.2之后的版本中都可以使用，新式类的继承顺序采用C3算法，其继承顺序可以通过查看MRO列表获取。<br><a id="more"></a><br><!--toc--></p>
<h1 id="经典类与新式类的区别">经典类与新式类的区别</h1><ol>
<li><p>经典类是默认没有派生自某个基类的，而新式类默认派生自<code>object</code>基类：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># old style</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># new style</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>经典类在类多重继承的时候是采用的从左至右深度优先的匹配方法，而新式类采用C3算法（不同于广度优先）进行匹配的。</p>
</li>
<li><p>经典类没有<code>__MRO__</code>和<code>instance.mro()</code>调用，而新式类有。</p>
</li>
</ol>
<h1 id="经典类中的继承问题">经典类中的继承问题</h1><p>经典类中采用<strong>深度优先</strong>的匹配方法，可能导致在查询继承树中绕过后面的父类：<br><!--more--><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"class D"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(D)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(D)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"class C"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(B, C)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">f = A()</span><br><span class="line">f.foo()</span><br></pre></td></tr></table></figure></p>
<p>其输出为：class D。<br>新式类采用<strong>C3算法</strong>（区别于<strong>广度优先</strong>的原则）进行搜索，若使用新式类：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"class D"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(D)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(D)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"class C"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(B, C)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">f = A()</span><br><span class="line">f.foo()</span><br></pre></td></tr></table></figure></p>
<p>输出为：class C<br>搜索的顺序如下图所示：</p>
<div class="figure center nocaption"><a class="fancybox" href="https://farm1.staticflickr.com/678/21780464824_b470a6eab4.jpg" title="Python中类的方法解析顺序" target="_blank" rel="external"><img class="fig-img" src="https://farm1.staticflickr.com/678/21780464824_b470a6eab4.jpg" width="" height="" alt="python_old_26new_class" title="Python中类的方法解析顺序"></a></div>
<h1 id="C3算法">C3算法</h1><p><strong>C3算法</strong>最早被提出是用于Lisp的，应用在Python中是为了解决原来基于深度优先搜索算法不满足本地优先级，和单调性的问题。</p>
<ul>
<li><strong>本地优先级</strong>：指声明时父类的顺序，比如C(A,B)，如果访问C类对象属性时，应该根据声明顺序，优先查找A类，然后再查找B类。</li>
<li><strong>单调性</strong>：如果在C的解析顺序中，A排在B的前面，那么在C的所有子类里，也必须满足这个顺序。</li>
</ul>
<p><strong>深度优先搜索</strong>用栈（stack）来实现，整个过程可以想象成一个倒立的树形：</p>
<ol>
<li>把根节点压入栈中。</li>
<li>每次从栈中弹出一个元素，搜索所有在它下一级的元素，把这些元素压入栈中。并把这个元素记为它下一级元素的前驱。</li>
<li>找到所要找的元素时结束程序。</li>
<li>如果遍历整个树还没有找到，结束程序。</li>
</ol>
<p><strong>广度优先搜索</strong>使用队列（queue）来实现，整个过程也可以看做一个倒立的树形：</p>
<ol>
<li>把根节点放到队列的末尾。</li>
<li>每次从队列的头部取出一个元素，查看这个元素所有的下一级元素，把它们放到队列的末尾。并把这个元素记为它下一级元素的前驱。</li>
<li>找到所要找的元素时结束程序。</li>
<li>如果遍历整个树还没有找到，结束程序。</li>
</ol>
<p>对于同一段程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"A"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"B"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(B)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"C"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"D"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span><span class="params">(D)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"E"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span><span class="params">(C, E)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"F"</span></span><br><span class="line"></span><br><span class="line">f = F()</span><br><span class="line">f.foo1()</span><br></pre></td></tr></table></figure></p>
<p>当使用深度优先搜索，广度优先搜索及C3算法的不同搜索顺序如下：</p>
<div class="figure fig-33"><a class="fancybox" href="https://farm1.staticflickr.com/592/21782098993_467910d598.jpg" title="DFS深度优先搜索(FCBAED)" target="_blank" rel="external"><img class="fig-img" src="https://farm1.staticflickr.com/592/21782098993_467910d598_n.jpg" width="30%" height="" alt="resolution_order-deep-first-search" title="DFS深度优先搜索(FCBAED)"></a><span class="caption">DFS深度优先搜索(FCBAED)</span></div>
<div class="figure fig-33"><a class="fancybox" href="https://farm1.staticflickr.com/651/22215216660_42133913bb.jpg" title="BFS广度优先搜索(FCEBDA)" target="_blank" rel="external"><img class="fig-img" src="https://farm1.staticflickr.com/651/22215216660_42133913bb_n.jpg" width="" height="" alt="resolution_order-broad-first-search" title="BFS广度优先搜索(FCEBDA)"></a><span class="caption">BFS广度优先搜索(FCEBDA)</span></div>
<div class="figure fig-33"><a class="fancybox" href="https://farm1.staticflickr.com/661/22215486608_17a874a876.jpg" title="C3算法(FCBEDA)" target="_blank" rel="external"><img class="fig-img" src="https://farm1.staticflickr.com/661/22215486608_17a874a876_n.jpg" width="" height="" alt="resolution_order-C3-search" title="C3算法(FCBEDA)"></a><span class="caption">C3算法(FCBEDA)</span></div><div style="clear:both;"></div>
<p>对于新式类，可以用<code>instance.__mro__</code>或<code>instance.mro()</code>来查看其MRO（Method Resolution Order 方法解析顺序）列表。对于上文代码中的类<code>F</code>的MRO如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print F.mro()</span><br><span class="line">(&lt;class '__main__.F'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.E'&gt;, &lt;class '__main__.D'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)</span><br></pre></td></tr></table></figure></p>
<p>即C3算法的解析结果。<br>同时为了解决多重继承中的调用父类问题，python2.2之后引入了<code>super</code>。</p>
<hr>
<p>参考资料：</p>
<ol>
<li><a href="http://python-history.blogspot.com/2010/06/method-resolution-order.html" title="Method Resolution Order" target="_blank" rel="external">Method Resolution Order</a></li>
<li><a href="http://www.jb51.net/article/57263.htm" title="Python类的多重继承问题深入分析" target="_blank" rel="external">Python类的多重继承问题深入分析</a></li>
<li><a href="http://blog.csdn.net/imzoer/article/details/8737642" title="python类学习以及mro--多继承属性查找机制 " target="_blank" rel="external">python类学习以及mro–多继承属性查找机制 </a></li>
<li><a href="http://demo.netfoucs.com/icode0410/article/details/39400233" title="Python 类继承，__bases__, __mro__, super " target="_blank" rel="external">Python 类继承，__bases__, __mro__, super </a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>Python 的类分为经典类与新式类。Python2.7之前的版本中可以采用经典类，经典类继承父类的顺序采用深度优先算法，但在Python3之后的版本就只承认新式类了。新式类在python2.2之后的版本中都可以使用，新式类的继承顺序采用C3算法，其继承顺序可以通过查看MRO列表获取。<br>]]>
    
    </summary>
    
      <category term="class" scheme="http://libhappy.com/tags/class/"/>
    
      <category term="python" scheme="http://libhappy.com/tags/python/"/>
    
      <category term="继承" scheme="http://libhappy.com/tags/%E7%BB%A7%E6%89%BF/"/>
    
      <category term="Python" scheme="http://libhappy.com/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[编写第一个PyQt4程序]]></title>
    <link href="http://libhappy.com/2015/07/pyqt4-tutorial-01/"/>
    <id>http://libhappy.com/2015/07/pyqt4-tutorial-01/</id>
    <published>2015-07-07T09:30:17.000Z</published>
    <updated>2015-12-16T05:00:20.607Z</updated>
    <content type="html"><![CDATA[<p>PyQt是Qt库的Python版本，该教程是 <a href="http://zetcode.com/gui/pyqt4/" target="_blank" rel="external">zetcode</a> PyQt4教程的中文翻译。<br>本文主要介绍了PyQt4的基本使用方法及基本窗口的绘制。<br><a id="more"></a><br><!--toc--></p>
<h1 id="简单示例">简单示例</h1><p>第一个程序显示一个简单的窗口。<br>以下是原始代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span><br><span class="line">Created on Sat Jul 04 21:23:31 2015</span><br><span class="line"></span><br><span class="line">@author: Arthur</span><br><span class="line">an example for PyQt4 gui program.</span><br><span class="line">"""</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt4 <span class="keyword">import</span> QtGui    <span class="comment"># 导入必要的模块</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    app = QtGui.QApplication(sys.argv)   <span class="comment"># 创建一个应用对象，sys.argv为命令行传入的参数</span></span><br><span class="line"></span><br><span class="line">    window = QtGui.QWidget() <span class="comment"># QtGui.Qwidget 是所有界面对象的基础类，没有父类的部件称为窗口</span></span><br><span class="line">    window.resize(<span class="number">250</span>, <span class="number">150</span>) <span class="comment"># 调整部件大小，250px宽150px高</span></span><br><span class="line">    window.move(<span class="number">300</span>, <span class="number">300</span>)  <span class="comment"># 移动部件的位置到屏幕 (x = 300, y = 300)处</span></span><br><span class="line">    window.setWindowTitle(<span class="string">'Simple'</span>) <span class="comment"># 设置窗口标题栏显示的标题</span></span><br><span class="line">    window.show() <span class="comment"># 在内存中创建组件并显示在屏幕上</span></span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_()) <span class="comment"># sys.exit()保证程序完全的退出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>显示窗口如下：</p>
<div class="figure center"><img class="fig-img" src="https://farm6.staticflickr.com/5793/22215503798_0382018900_m.jpg" width="" height="" alt="1_first_1" title="简单的窗口"><span class="caption">简单的窗口</span></div>
<h1 id="添加应用图标(Application_icon)">添加应用图标(Application icon)</h1><p>添加在标题栏左上角显示的应用图标，代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span><br><span class="line">Created on Sat Jul 04 21:54:19 2015</span><br><span class="line"></span><br><span class="line">@author: Arthur</span><br><span class="line">A gui program with application icon.</span><br><span class="line">use OOP(Object Oriented Programming)</span><br><span class="line">"""</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt4 <span class="keyword">import</span> QtGui</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QtGui.QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Example, self).__init__() <span class="comment"># super() method 返回对象'Example'的父类</span></span><br><span class="line"></span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">150</span>) <span class="comment"># 设置窗口的坐标及大小(x, y, 宽, 高)</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'Icon'</span>)</span><br><span class="line">        self.setWindowIcon(QtGui.QIcon(<span class="string">'web.png'</span>)) <span class="comment"># 设置窗口应用图标</span></span><br><span class="line"></span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    app = QtGui.QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>该程序以面向对象的风格书写，面向对象编程中最重要的是类(class)，数据(data)和方法(method)。显示的窗口如下：</p>
<div class="figure center"><img class="fig-img" src="https://farm6.staticflickr.com/5710/22215504998_90237dc62c_m.jpg" width="" height="" alt="2_icon_1" title="在标题栏显示程序图标"><span class="caption">在标题栏显示程序图标</span></div>
<hr>
<h1 id="显示提示信息">显示提示信息</h1><p>显示部件的气球帮助提示。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span><br><span class="line">Created on Sun Jul 05 11:40:30 2015</span><br><span class="line"></span><br><span class="line">@author: Arthur</span><br><span class="line">show a tooltip</span><br><span class="line">"""</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt4 <span class="keyword">import</span> QtGui</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QtGui.QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Example, self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        QtGui.QToolTip.setFont(QtGui.QFont(<span class="string">'SansSerif'</span>, <span class="number">10</span>)) <span class="comment"># 设置提示的字形及字体大小</span></span><br><span class="line">        self.setToolTip(<span class="string">'This is a &lt;b&gt;QWidget&lt;/b&gt; widget'</span>)</span><br><span class="line"></span><br><span class="line">        btn = QtGui.QPushButton(<span class="string">'Button'</span>, self)</span><br><span class="line">        btn.setToolTip(<span class="string">'This is a &lt;b&gt;QPushButton&lt;/b&gt; widget'</span>)</span><br><span class="line">        btn.resize(btn.sizeHint())  <span class="comment"># szieHint() 返回按钮推荐的大小</span></span><br><span class="line">        btn.move(<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">150</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'Tooltips'</span>)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    app = QtGui.QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>显示的窗口如下：</p>
<div class="figure center"><img class="fig-img" src="https://farm6.staticflickr.com/5814/22390057122_b69cfefa95_m.jpg" width="" height="" alt="3_tooltip_2" title="创建有气泡提示的按钮"><span class="caption">创建有气泡提示的按钮</span></div>
<hr>
<h1 id="关闭窗口">关闭窗口</h1><p>以上的例子中都是通过点击窗口右上角的<code>X</code>来关闭窗口，下面的例子演示了通过程序内的方法关闭窗口。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span><br><span class="line">Created on Sun Jul 05 12:24:44 2015</span><br><span class="line">@author: Arthur</span><br><span class="line">A button with quit</span><br><span class="line">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt4 <span class="keyword">import</span> QtGui, QtCore</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QtGui.QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Example, self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        qbtn = QtGui.QPushButton(<span class="string">'Quit'</span>, self) <span class="comment"># 参数分别为按钮的标签及按钮的父类</span></span><br><span class="line">        qbtn.clicked.connect(QtCore.QCoreApplication.instance().quit)</span><br><span class="line"></span><br><span class="line">        qbtn.resize(qbtn.sizeHint())</span><br><span class="line">        qbtn.move(<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">150</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'Tooltips'</span>)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    app = QtGui.QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>该程序创建了<code>QtGui.QPushButton</code>类的一个实例<code>qbtn</code>，在以下的语句中赋予了该按钮关闭程序的功能：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qbtn.clicked.connect(QtCore.QCoreApplication.instance().quit)</span><br></pre></td></tr></table></figure>
<div class="figure right"><img class="fig-img" src="https://farm1.staticflickr.com/565/22377226956_789c1b572a_m.jpg" width="" height="" alt="4_quit_button_1" title="使程序退出的按钮"><span class="caption">使程序退出的按钮</span></div>
<p>PyQt4中的事件处理是由信号（signals）与槽（slots）机制实现的，如果点击按钮，将会发出<code>clicked()</code>的信号。槽可以是PyQt的槽或者是Python可调用的方法。通过使用<code>QtCore.QObject.connect()</code>方法将信号和槽链接起来。<code>QtCore.QCoreApplication</code> 包含了主要的事件循环，它处理和分配所有的事件。<code>instance()</code>方法返回它自己的实例。 应该注意的是<code>QtCore.QCoreApplication</code>同<code>QtGui.QApplication</code>一起被创建。点击信号连接到PyQt中预先定义的<code>quit()</code>槽。至此信号发送方与接收方之间的通信完成，发送方为点击按钮，接收方为程序对象。</p>
<hr>
<h1 id="消息框">消息框</h1><p>当点击窗口右上角<code>x</code>退出时弹出确认消息框。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span><br><span class="line">Created on Sun Jul 05 12:38:58 2015</span><br><span class="line">@author: Arthur</span><br><span class="line">show message box</span><br><span class="line">"""</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt4 <span class="keyword">import</span> QtGui</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QtGui.QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Example, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">150</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'Message box'</span>)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closeEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        reply = QtGui.QMessageBox.question(self, <span class="string">'Message'</span>,</span><br><span class="line">        <span class="string">"Are you sure to quit?"</span>, QtGui.QMessageBox.Yes |</span><br><span class="line">        QtGui.QMessageBox.No, QtGui.QMessageBox.No) <span class="comment"># (消息框标题, 显示消息, 选项 | 选项, 默认选项)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> reply == QtGui.QMessageBox.Yes:</span><br><span class="line">            event.accept()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            event.ignore()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    app = QtGui.QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<div class="figure center"><img class="fig-img" src="https://farm6.staticflickr.com/5678/22216388499_4a2df52106_m.jpg" width="" height="" alt="5_message_box_1" title="点击关闭后弹出确认消息框"><span class="caption">点击关闭后弹出确认消息框</span></div>
<div class="figure right"><img class="fig-img" src="https://farm6.staticflickr.com/5815/22377228426_c71f00748e_m.jpg" width="" height="" alt="5_message_box_2" title="确认关闭消息框"><span class="caption">确认关闭消息框</span></div>
<p>如果要关闭<code>QWidget</code>，<code>QCloseEvent</code>事件就会产生。要修改<code>QWidget</code>的默认行为，就需要重载父类中的<code>closeEvent()</code>方法。点击关闭按钮后，弹出如右对话框。<br>点击<code>Yes</code>或<code>No</code>后，对<code>replay</code>值进行比较，如果为<code>Yes</code>则接收事件关闭窗口，相反则忽略事件。</p>
<hr>
<h1 id="居中窗口">居中窗口</h1><p>在屏幕中央显示窗口。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span><br><span class="line">Created on Sun Jul 05 14:42:27 2015</span><br><span class="line">@author: Arthur</span><br><span class="line">centering window on the screen</span><br><span class="line">"""</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt4 <span class="keyword">import</span> QtGui</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QtGui.QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Example, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.resize(<span class="number">250</span>, <span class="number">150</span>)</span><br><span class="line">        self.center()</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">'Center'</span>)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">center</span><span class="params">(self)</span>:</span></span><br><span class="line">        qr = self.frameGeometry() <span class="comment"># 返回代表窗口框架结构的矩形</span></span><br><span class="line">        cp = QtGui.QDesktopWidget().availableGeometry().center() <span class="comment"># 返回屏幕（可显示区域）的中心点</span></span><br><span class="line">        qr.moveCenter(cp) <span class="comment"># 将与窗口同大的矩形移动到屏幕中央</span></span><br><span class="line">        self.move(qr.topLeft())  <span class="comment"># 将主窗口移动到已定位的矩形处，QWidget的移动以左上角为基准点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    app = QtGui.QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>通过<code>frameGeometry()</code>获得代表窗口框架结构的矩形，通过<code>availableGeometry().center()</code>获得屏幕（可显示区域）的中心点，用<code>moveCenter()</code>方法将该框架矩形移动到屏幕中央，再将主窗口移动到已定位的矩形处。<br>由于移动窗口组件时是以组件的右上角为基准点，所以不能用<del><code>self.move(cp)</code></del>移动窗口到中心。<br>也可以在获得屏幕与窗口几何参数后直接移动窗口的左上角到计算出的目的位置：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">screen = QtGui.QDesktopWidget().screenGeometry() <span class="comment"># 获得屏幕形状参数</span></span><br><span class="line">size = self.geometry() <span class="comment"># 获得窗口形状参数</span></span><br><span class="line">self.move((screen.width() - size.width()) / <span class="number">2</span>, (screen.height() - size.height()) / <span class="number">2</span>) <span class="comment"># 计算出窗口左上角移动后的位置，再直接移动窗口</span></span><br></pre></td></tr></table></figure>
<hr>
<p>参考资料：</p>
<ol>
<li>First Program in PyQt4 from <a href="http://zetcode.com/gui/pyqt4/firstprograms/" title="First Program" target="_blank" rel="external">zetcode</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>PyQt是Qt库的Python版本，该教程是 <a href="http://zetcode.com/gui/pyqt4/">zetcode</a> PyQt4教程的中文翻译。<br>本文主要介绍了PyQt4的基本使用方法及基本窗口的绘制。<br>]]>
    
    </summary>
    
      <category term="pyqt4" scheme="http://libhappy.com/tags/pyqt4/"/>
    
      <category term="python" scheme="http://libhappy.com/tags/python/"/>
    
      <category term="zetcode" scheme="http://libhappy.com/tags/zetcode/"/>
    
      <category term="PyQt4" scheme="http://libhappy.com/categories/PyQt4/"/>
    
  </entry>
  
</feed>
